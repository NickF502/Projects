package src;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingConstants;



/**
 * @author Nicholas Farkash
 * A class extended from a JButton. It contains information for the player regarding each
 * equipment piece  
 */
public class EquipmentButton extends JButton {

	/**
	 * Instance variables for the class
	 * 
	 * @param baseCost The price to purchase the first equipment of its kind
	 * @param baseBPS The BPS this equipment produces without upgrades
	 * @param name The name of this piece of equipment
	 * @param cost The current cost of this piece of equipment
	 * @param bps The current BPS this equipment produces
	 * @param amount The number of this equipment that has been purchased
	 */
    final Long baseCost;
    final Long baseBPS;
    String name;
    Long cost;
    Long bps;
    int amount = 0;
    
    
    
	/**
	 * Constructor for the EquiptmentButton class
	 * 
	 * @param item The name of the piece of equipment
	 * @param price The initial cost of the piece of equipment
	 * @param b_per_s The initial Baseballs per Second generated by the piece of equipment
	 */
    public EquipmentButton(String item, Long price, Long b_per_s) {
    	
    	// Set the instance variables using the constructor's parameters
    	baseCost = cost = price;
        name = item;
        baseBPS = bps = b_per_s;

        // Get the image for the button, scale it, and set it as the buttons icon
        ImageIcon icon = new ImageIcon("Images/"+name+".png");
        Image image = (icon.getImage()).getScaledInstance(75, 75,  java.awt.Image.SCALE_SMOOTH);
		setIcon(new ImageIcon(image));
		setIcon(icon);

        // Set Button Characteristics
        setIconTextGap(20);										// Add a space between the icon and the text
        setBackground(GameMain.buttonGray);						// Set the color of the button
        setHorizontalAlignment(SwingConstants.LEFT);			// Align the button's content to the left side
        setFocusable(false);									// Remove the selection border
        setFont(new Font("Courier New Bold", Font.BOLD, 20));	// Set the font of the button
        formatButton(); 										// Update the Button's text		

		// Mouse Listener for the EquiptmentButton
        addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
            	
            	// If the player has enough baseballs to purchase the equipment
            	if (GameMain.numBaseballs >= cost) {
            		
            		GameMain.currentBPS += bps;		// Increase the global BPS by the equipment's additional BPS
            		GameMain.numBaseballs -= cost;	// Decrease the global baseball counter by the equipment's cost
            		amount++;						// Incrase the number of this equipment
            		cost = (long) (int) Math.floor(baseCost * Math.pow(1.15, amount));	// Increase the cost according to the formula
            		
            		updateButton(); // Update the button
            		
            		// Update panels and buttons
            		GameWindow.equipButtonPanel.updateInfo();
            		GameWindow.upgradeButtonPanel.updateInfo();
            		GameWindow.header.scoreboard.updateScoreDisplay();
            		
            		// If a new BPS milestone has been reached, update the current BPC	*/
            		if(GameMain.currentBPS >= GameMain.BPSMilestones[0])
            			GameMain.updateBPC();
            		
            	}
                
            }

            public void mouseReleased(MouseEvent e) {
                GameWindow.header.scoreboard.updateScoreDisplay();
            }

            public void mousePressed(MouseEvent e) {}

            public void mouseEntered(MouseEvent e) {}

            public void mouseExited(MouseEvent e) {}
            
        });
        
    }
    
    
    
    /*
     * Method to check if a new upgrade should be made available
     */
    void updateButton() {
    	formatButton();
    	
    }
    
    
    
    /**
     * Method to update the button's text 
     */
    void formatButton() {
    	
    	// Properly format the numbers and store them in strings, then update the text
        String textCost = GameMain.formatNumber(cost, false);
        String textBPS = GameMain.formatNumber(bps, false);

        setText("<html>" + name + " (" + amount + ")<br /> Cost: " + textCost + "<br />BpS: " + textBPS
                + " BpS<html>");

    }

    
    
    /**
     * Set up the button properly using stored data
     * 
     * @param numPurchased The number of this equipment that was previously purchased and is being loaded in
     * @return The total BPS this equiptment currently produces
     */
    public Long loadButton(long numPurchased) {
    	
        amount = (int)numPurchased;
        cost = (long) (int) Math.floor(baseCost * Math.pow(1.15, amount));
        
        formatButton(); // Reformat the button's text
        GameWindow.header.scoreboard.updateScoreDisplay();	// Update the scoreboard display
        return amount * bps;
        
    }
    
    
    
    /**
     * Reset the button when a new game has been started
     */
    public void resetButton() {
    	
    	amount = 0;
    	bps = baseBPS;
    	cost = baseCost;
    	
    	formatButton();	// Reformat the button's text

    }
    
    
    
    /**
     * Double the button's BPS when an upgrade is purchased
     */
    public void doubleBPS(){
    	bps *= 2;
    }
    
    

    /**
	 * A method to change the background color depening on whether the game
	 * is in Light Mode or Dark Mode
	 * 
	 * @param isDark A boolean that evaluates to true if the game is currently in
	 * dark mode
	 */
    public void setDark(boolean isDark) {
    	if(isDark) setBackground(GameMain.medGray);
    	else setBackground(GameMain.buttonGray);
    }
    
    
    
    /**
     * Changes the color of the button depending on if purchase can be made
     * 
     * @param isPurchasable Evaluates to true if the button is Purchasable
     */
    public void setPurchasable(boolean isPurchasable) {
    	if(isPurchasable) setBackground(Color.yellow);
    	else setDark(GameWindow.isDark);
    }
    
}
